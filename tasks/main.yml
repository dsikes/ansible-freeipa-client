---
# =====================================
# AWS Environment Check
# =====================================
- name: Checking if runtime environment is AWS...
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 2
  register: aws_uri_check
  ignore_errors: yes

- name: "AWS Response:"
  debug:
    msg:
      - "Response Code: {{ aws_uri_check.status }} --> {{ aws_uri_check.msg }}"

- name: Setting is_aws flag value...
  set_fact:
    is_aws: "{{ aws_uri_check.status == 200 }}"
  when: aws_uri_check.status == 200

- name: "{{ 'EnvironmentType: AWS' if is_aws else 'EnvironmentType: Non-AWS' }}"
  debug:
    msg:
      - "AWS Environment check returned: {{ aws_uri_check.status }}"
      - "is_aws flag set to: {{ 'True' if aws_uri_check.status == 200 else 'False'  }}"

# -------------------------------------
# Install FreeIPA Client and Dependancy Packages
# ======================================

- name: Installing Epel Yum Repository...
  yum:
    name:
      - epel-release
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


# Install IPA Client / Server packages
- name: Installing FreeIPA client & server packages on {{ ansible_distribution }}...
  yum:
    name:
      - ipa-client
      - ipa-server
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

# ----------------------
# Configure Networking
# ----------------------

# Overwrite the /etc/hostname file with this hosts FQDN entry
- name: Setting FQDN hostname in /etc/hostname...
  shell: echo {{ local_hostname }}.{{ domain }} > /etc/hostname
  args:
    warn: False
  register: etchostname_cmd
  failed_when: "'FAILED' in etchostname_cmd.stderr"
  changed_when: False

- name: Verifying /etc/hostname changes...
  command: cat /etc/hostname
  args:
    warn: False
  register: etchostname_details
  failed_when: "'FAILED' in etchostname_details.stderr"
  changed_when: False

- name: /etc/hostname
  debug:
    msg: "{{ etchostname_details.stdout_lines }}"

# Overwrite the /etc/hosts file with this hosts FQDN entry
- name: Setting hostname FQDN in /etc/hosts...
  lineinfile:
    dest: /etc/hosts
    state: present
    regexp: "^{{ ansible_default_ipv4.address }}    {{ local_hostname }}.{{ domain }} {{ local_hostname }}"
    line: "{{ ansible_default_ipv4.address }}    {{ local_hostname }}.{{ domain }} {{ local_hostname }}"

- name: Setting {{ ipa_server }} FQDN to /etc/hosts...
  lineinfile:
    dest: /etc/hosts
    state: present
    regexp: "^{{ ipa_server_ipaddress }}   {{ ipa_server_hostname }}.{{ domain }}"
    line: "{{ ipa_server_ipaddress }}   {{ ipa_server_hostname }}.{{ domain }}"

- name: Verifying /etc/hosts changes...
  command: cat /etc/hosts
  args:
    warn: False
  register: etchosts_details
  failed_when: "'FAILED' in etchosts_details.stderr"
  changed_when: False

- name: /etc/hosts
  debug:
    msg: "{{ etchosts_details.stdout_lines }}"

- name: Setting IPA DC to local DNS resolver on ifcfg-{{ ansible_default_ipv4.interface }}...
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    state: present
    regexp: '^DNS1='
    line: 'DNS1={{ ipa_server_ipaddress }}'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Setting {{ domain }} as local DNS search domain on ifcfg-{{ ansible_default_ipv4.interface }}...
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    state: present
    regexp: '^DOMAIN='
    line: 'DOMAIN={{ domain }}'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Verifying ifcfg-{{ ansible_default_ipv4.interface }} changes...
  command: cat /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
  register: ifcfg_details
  failed_when: "'FAILED' in ifcfg_details.stderr"
  changed_when: False

- name: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
  debug:
    msg: "{{ ifcfg_details.stdout_lines }}"

# Restart Networking Service
- name: Flushing pending Network Handler actions...
  meta: flush_handlers # Force restart handlers to restart now instead of at end of playbook run.

# ----------------------
# Run FreeIPA Setup
# ----------------------
# Stat the named.conf and IPA default.conf file, if the file exists, then IPA is already configured.
- name: Checking for previous FreeIPA installations...
  stat: path=/etc/ipa/default.conf
  register: ipa_config

- name: "Searching for existing IPA config file /etc/ipa/default.conf:"
  debug:
    msg:
      - "{{ 'FILE FOUND' if ipa_config.stat.exists else 'FILE NOT FOUND' }}"

- name: Joining the FreeIPA Domain...
  shell: |
  set -o pipefail
  echo 'yes' | ipa-client-install --hostname=`hostname -f` \
  --no-ntp \
  --no-dns-sshfp \
  --mkhomedir \
  --enable-dns-updates \
  --ssh-trust-dns \
  --domain={{ domain }} \
  --unattended \
  --principal={{ ipa_join_user }} \
  --password='{{ ipa_join_password }}' \
  --force-join \
  --verbose \
  --server={{ipa_server_hostname}}.{{domain}} \
  --domain={{ domain }} \
  --realm {{ domain }}
  args:
    warn: False
  register: ipa_join
  failed_when: "'FAILED' in ipa_join.stderr"
  when: not ipa_config.stat.exists

- name: "IPA Client Join State:"
  debug:
    msg:
      - "{{ ipa_join.stdout }}"
  when: not ipa_config.stat.exists

- name: Installing IPA Replica packages...
  shell: |
  set -o pipefail
  ipa-replica-install
  args:
    warn: False
  register: ipa_replica_install
  failed_when: "'FAILED' in ipa_replica_install.stderr"
  when: not ipa_config.stat.exists

- name: "IPA Replication Configured State:"
  debug:
    msg:
      - "{{ ipa_replica_install.stdout }}"
  when: not ipa_config.stat.exists
